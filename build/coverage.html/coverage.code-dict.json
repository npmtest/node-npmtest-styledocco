{"/home/travis/build/npmtest/node-npmtest-styledocco/test.js":"/* istanbul instrument in package npmtest_styledocco */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-styledocco/lib.npmtest_styledocco.js":"/* istanbul instrument in package npmtest_styledocco */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_styledocco = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_styledocco = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-styledocco/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-styledocco && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_styledocco */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_styledocco\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_styledocco.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_styledocco.rollup.js'] =\n            local.assetsDict['/assets.npmtest_styledocco.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_styledocco.__dirname + '/lib.npmtest_styledocco.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-styledocco/node_modules/styledocco/styledocco.js":"'use strict';\n\nvar marked = require('marked');\nmarked.setOptions({ sanitize: false, gfm: true });\n\n// Regular expressions to match comments. We only match comments in\n// the beginning of lines. \nvar commentRegexs = {\n  single: /^\\/\\//, // Single line comments for Sass, Less and Stylus\n  multiStart: /^\\/\\*/,\n  multiEnd: /\\*\\//\n};\n\n// Make an URL slug from `str`.\nvar slugify = function(str) {\n  return encodeURIComponent(\n    str.trim().toLowerCase()\n      .replace(/[^\\w ]+/g,'')\n      .replace(/ +/g,'-')\n  );\n};\n\n// Check if a string is code or a comment (and which type of comment).\nvar checkType = function(str) {\n  // Treat multi start and end on same row as a single line comment.\n  if (str.match(commentRegexs.multiStart) && str.match(commentRegexs.multiEnd)) {\n    return 'single';\n  // Checking for multi line comments first to avoid matching single line\n  // comment symbols inside multi line blocks.\n  } else if (str.match(commentRegexs.multiStart)) {\n    return 'multistart';\n  } else if (str.match(commentRegexs.multiEnd)) {\n    return 'multiend';\n  } else if ((commentRegexs.single != null) && str.match(commentRegexs.single)) {\n    return 'single';\n  } else {\n    return 'code';\n  }\n};\n\nvar formatDocs = function(str) {\n  // Filter out comment symbols\n  for (var key in commentRegexs) {\n    str = str.replace(commentRegexs[key], '');\n  }\n  return str + '\\n';\n};\n\nvar formatCode = function(str) {\n  // Truncate base64 encoded strings\n  return str.replace(/(;base64,)[^\\)]*/, '$1...') + '\\n';\n};\n\n// Trim newlines from beginning and end of a multi line string.\nvar trimNewLines = function(str) {\n  return str.replace(/^\\n*/, '').replace(/\\n*$/, '');\n};\n\nvar htmlEntities = function(str) {\n  return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n};\n\nvar separate = function(css) {\n  var lines = css.split('\\n');\n  var docs, code, line, blocks = [];\n  while (lines.length) {\n    docs = code = '';\n    // First check for any single line comments.\n    while (lines.length && checkType(lines[0]) === 'single') {\n      docs += formatDocs(lines.shift());\n    }\n    // A multi line comment starts here, add lines until comment ends.\n    if (lines.length && checkType(lines[0]) === 'multistart') {\n      while (lines.length) {\n        line = lines.shift();\n        docs += formatDocs(line);\n        if (checkType(line) === 'multiend') break;\n      }\n    }\n    while (lines.length && (checkType(lines[0]) === 'code' || checkType(lines[0]) === 'multiend')) {\n      code += formatCode(lines.shift());\n    }\n    blocks.push({ docs: docs, code: code });\n  }\n  return blocks;\n};\n\n\nvar makeSections = exports.makeSections = function(blocks) {\n  return blocks\n    .map(function(block) {\n      // Run comments through marked.lexer to get Markdown tokens.\n      block.docs = marked.lexer(block.docs);\n      return block;\n    })\n    .map(function(block) {\n      // If we encounter code blocks in documentation, add preview HTML.\n      var newBlock = {\n        code: block.code,\n        docs: block.docs.reduce(function(tokens, token) {\n          if (token.type === 'code' && (token.lang == null || token.lang === 'html')) {\n            token.type = 'html';\n            token.pre = true;\n            token.text = '<textarea class=\"preview-code\" spellcheck=\"false\">' + htmlEntities(token.text) + '</textarea>';\n          // Add permalink `id`s and some custom properties to headings.\n          } else if (token.type === 'heading') {\n            var slug = slugify(token.text);\n            token.type = 'html';\n            token._slug = slug;\n            token._origText = token.text;\n            // This token should start a new doc section\n            if (token.depth === 1) token._split = true;\n            token.text = '<h' + token.depth + ' id=\"' + slug + '\">' +\n                         token.text + '</h' + token.depth + '>\\n';\n          }\n          tokens.push(token);\n          return tokens;\n        }, [])\n      };\n      // Keep marked's custom links property on the docs array.\n      newBlock.docs.links = block.docs.links;\n      return newBlock;\n    }, [])\n    .reduce(function(sections, cur) {\n      // Split into sections with headings as delimiters.\n      var docs = cur.docs;\n      while (docs.length) {\n        // New or first section, add title/slug properties.\n        if (docs[0]._split || sections.length === 0) {\n          var title = docs[0]._origText;\n          var slug = docs[0]._slug;\n          sections.push({ docs: [ docs.shift() ], code: '',\n                          title: title, slug: slug });\n        } else {\n          // Add the documentation to the last section.\n          sections[sections.length-1].docs.push(docs.shift());\n        }\n        // Keep marked's custom links property on the docs arrays.\n        sections[sections.length-1].docs.links = docs.links;\n      }\n      // No docs in file, just add the CSS.\n      if (sections.length === 0) {\n        sections.push(cur);\n      // Add remaining code to the last section.\n      } else {\n        sections[sections.length-1].code += cur.code;\n      }\n      return sections;\n    }, [])\n    .map(function(section) {\n      // Run through marked parser to generate HTML.\n      return {\n        title: section.title ? section.title.trim() : '',\n        slug: section.slug || '',\n        docs: trimNewLines(marked.parser(section.docs)),\n        code: trimNewLines(section.code)\n      };\n    });\n};\n\nmodule.exports = function(css) {\n  return makeSections(separate(css));\n};\n\nmodule.exports.makeSections = makeSections;\nmodule.exports.separate = separate;\n","/home/travis/build/npmtest/node-npmtest-styledocco/node_modules/styledocco/cli.js":"'use strict';\n\nvar async = require('async');\nvar cleancss = require('clean-css');\nvar spawn = require('child_process').spawn;\nvar findit = require('findit');\nvar fs = require('fs');\nvar jade = require('jade');\nvar marked = require('marked');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar uglifyjs = require('uglify-js');\nvar util = require('util');\n\nvar styledocco = require('./styledocco');\n\nvar version = require('./package').version;\n\nmarked.setOptions({ sanitize: false, gfm: true });\n\n// Helper functions\nvar mincss = function(css) { return cleancss.process(css); };\nvar minjs = uglifyjs;\nvar pluck = function(arr, prop) {\n  return arr.map(function(item) { return item[prop]; });\n};\n\nvar isType = function(o, type) {\n    return Object.prototype.toString.call(o) === '[object ' + type + ']';\n};\n\nvar flatten = function(arr) {\n  return arr.reduce(function(tot, cur) {\n    return tot.concat(isArray(cur) ? flatten(cur) : cur);\n  }, []);\n};\nvar inArray = function(arr, str) { return arr.indexOf(str) !== -1; };\nvar isArray = function(obj) { return isType(obj, 'Array'); };\nvar isString = function(obj) { return isType(obj, 'String'); };\n\nvar urlsRelative = function(css, path) {\n    if (isString(css) && isString(path)) {\n        path = path.indexOf('/', path.length -1) > -1? path : path + '/';\n        var regex = /(url\\([\"']?)(?!https?:|data:)([^/'\"][\\w/.]*)/gm;\n        return css.replace(regex, \"$1\" + path + \"$2\");\n    } else {\n        throw new Error('1st and 2nd args must be strings.');\n    }\n};\n\nvar dirUp = function(steps) {\n    if ( ! steps) return '';\n    var str = '';\n    for (var i = 0; i < steps; ++i) {\n        str += '../';\n    }\n    return str;\n};\n\n// Get a filename without the extension\nvar baseFilename = function(str) {\n  return path.basename(str, path.extname(str)).replace(/^_/, '');\n};\n\nvar basePathname = function(file, basePath) {\n  return path.join(\n    path.dirname(path.relative(basePath, file) || path.basename(basePath)),\n    baseFilename(file)\n  );\n};\n\n// Build an HTML file name, named by it's path relative to basePath\nvar htmlFilename = function(file, basePath) {\n  return path.join(\n    path.dirname(path.relative(basePath, file) || path.basename(basePath)),\n    baseFilename(file) + '.html'\n  ).replace(/[\\\\/]/g, '-');\n};\n\n// Find first file matching `re` in `dir`.\nvar findFile = function(dir, re, cb) {\n  fs.stat(dir, function(err, stat) {\n    var files = fs.readdir(dir, function(err, files) {\n      files = files.sort().filter(function(file) { return file.match(re); });\n      if (!files.length) cb(new Error('No file found.'));\n      else cb(null, path.join(dir, files[0]));\n    });\n  });\n};\n\nvar getFiles = function(inPath, cb) {\n  fs.stat(inPath, function(err, stat) {\n    if (err != null) return cb(err);\n    if (stat.isFile()) {\n      cb(null, [ inPath ]);\n    } else {\n      var finder = findit(inPath);\n      var files = [];\n      finder.on('file', function(file) { files.push(file); });\n      finder.on('end', function() { cb(null, files); });\n    }\n  });\n};\n\n// Make `link` objects for the menu.\nvar menuLinks = function(files, basePath) {\n  return files.map(function(file) {\n    var parts = path.dirname(file).split('/');\n    parts.shift(); // Remove base directory name\n    return {\n      name: baseFilename(file),\n      href: htmlFilename(file, basePath),\n      directory: parts[parts.length-1] || './'\n    };\n  })\n  .reduce(function(links, link) {\n    if (links[link.directory] != null) {\n      links[link.directory].push(link);\n    } else {\n      links[link.directory] = [ link ];\n    }\n    return links;\n  }, {});\n};\n\nvar preprocess = function(file, pp, options, cb) {\n  // stdin would have been nice here, but not all preprocessors (less)\n  // accepts that, so we need to read the file both here and for the parser.\n  // Don't process SASS partials.\n  if (file.match(/(^|\\/)_.*\\.s(c|a)ss$/) != null) {\n    process.nextTick(function() { cb(null, ''); });\n  } else if (pp != null) {\n    pp += ' ';\n    pp += file;\n    pp = pp.split(' ');\n    pp = spawn(pp.shift(), pp);\n\n    pp.stderr.setEncoding('utf8');\n    pp.stdout.setEncoding('utf8');\n\n    var stdout = '';\n\n    pp.on('error', function(err) {\n      if (err != null && options.verbose) console.error(err.message);\n    });\n\n    pp.on('close', function() {\n      cb(null, stdout);\n    });\n\n    pp.stderr.on('data', function(data) {\n      if (data.length && options.verbose) console.error(data);\n    });\n\n    pp.stdout.on('data', function(data) {\n      stdout += data;\n    });\n  } else {\n    fs.readFile(file, 'utf8', cb);\n  }\n};\n\n\nvar cli = function(options) {\n\n  var errorMessages = { noFiles: 'No css files found' };\n  var resourcesDir = __dirname + '/share/';\n\n  // Filetypes and matching preprocessor binaries.\n  var fileTypes = {\n    '.css': null,\n    '.sass': 'sass',\n    '.scss': 'scss',\n    '.less': 'lessc',\n    '.styl': 'stylus'\n  };\n\n  var log = options.verbose ? function(str) { console.log(str); }\n                            : function() {};\n\n  // Custom error also outputing StyleDocco and Node versions.\n  var SDError = function(msg, err) {\n    this.message = msg + '\\n' + err.message + '\\n' +\n      'StyleDocco v' + version +\n      ' running on Node ' + process.version + ' ' + process.platform;\n    if (options.verbose) {\n      this.message += '\\nOptions: ' + JSON.stringify(options);\n    }\n  };\n  util.inherits(SDError, Error);\n\n  mkdirp(options.out);\n\n  // Fetch all static resources.\n  async.parallel({\n    template: function(cb) {\n      fs.readFile(resourcesDir + 'docs.jade', 'utf8', function(err, contents) {\n        if (err != null) return cb(err);\n        cb(null, jade.compile(contents));\n      });\n    },\n    docs: function(cb) {\n      async.parallel({\n        css: async.apply(fs.readFile, resourcesDir + 'docs.css', 'utf8'),\n        js: function(cb) {\n          async.parallel([\n            async.apply(fs.readFile, resourcesDir + 'docs.ui.js', 'utf8'),\n            async.apply(fs.readFile, resourcesDir + 'docs.previews.js', 'utf8')\n          ], function(err, res) {\n            if (err != null) return cb(err);\n            cb(null, res.join(''));\n          });\n        }\n      }, cb);\n    },\n    // Extra JavaScript and CSS files to include in previews.\n    previews: function(cb) {\n      fs.readFile(resourcesDir + 'previews.js', 'utf8', function(err, js) {\n        if (err != null) return cb(err);\n        var code = { js: js, css: '' };\n        var files = options.include.filter(function(file) {\n          return inArray(['.css', '.js'], path.extname(file));\n        });\n        async.filter(files, fs.exists, function(files) {\n          async.reduce(files, code, function(tot, cur, cb) {\n            fs.readFile(cur, 'utf8', function(err, contents) {\n              if (err != null) return cb(err);\n              tot[path.extname(cur).slice(1)] += contents;\n              cb(null, tot);\n            });\n          }, cb);\n        });\n      });\n    },\n    // Find input files.\n    files: function(cb) {\n      async.reduce(options['in'], [], function(all, cur, cb) {\n        getFiles(cur, function(err, files) {\n          if (err != null) return cb(err);\n          cb(null, all.concat(files));\n        });\n      }, function(err, files) {\n        if (err != null) return cb(err);\n        files = files.filter(function(file) {\n          // No hidden files\n          if (file.match(/(\\/|^)\\.[^\\.\\/]/)) return false;\n          // Only supported file types\n          if (!(path.extname(file) in fileTypes)) return false;\n          return true;\n        }).sort();\n        if (!files.length) cb(new Error(errorMessages.noFiles + ' in path \"' + options['in'] + '\"'));\n        cb(null, files);\n      });\n    },\n    // Look for a README file.\n    readme: function(cb) {\n      findFile(options.basePath, /^readme\\.m(ark)?d(own)?/i, function(err, file) {\n        if (file != null && err == null) return read(file);\n        findFile(process.cwd(), /^readme\\.m(ark)?d(own)?/i, function(err, file) {\n          if (err != null) file = resourcesDir + 'README.md';\n          read(file);\n        });\n      });\n      var read = function(file) {\n        fs.readFile(file, 'utf8', function(err, content) {\n          if (err != null) cb(err);\n          cb(null, content);\n        });\n      };\n    }\n  }, function(err, resources) {\n    if (err != null) {\n      if (err.message.indexOf(errorMessages.noFiles) > -1) {\n        console.error(err);\n        return;\n      } else {\n        throw new SDError('Could not process files.', err);\n      }\n    }\n    var menu = menuLinks(resources.files, options.basePath);\n    // Run files through preprocessor and StyleDocco parser.\n    async.map(resources.files, function(file, cb) {\n      async.parallel({\n        css: async.apply(preprocess, file,\n               options.preprocessor || fileTypes[path.extname(file)], options),\n        docs: function(cb) {\n          fs.readFile(file, 'utf8', function(err, code) {\n            if (err != null) return cb(err);\n            cb(null, styledocco(code));\n          });\n        }\n      }, function(err, data) {\n        if (err != null) return cb(err);\n        data.path = file;\n        cb(null, data);\n      });\n    }, function(err, files) {\n      if (err != null) throw err;\n      // Get the combined CSS from all files.\n      var previewStyles = pluck(files, 'css').join('');\n      previewStyles += resources.previews.css;\n      // Build a JSON string of all files and their headings, for client side search.\n      var searchIndex = flatten(files.map(function(file) {\n        var arr = [ { title: baseFilename(file.path),\n                      filename: basePathname(file.path, options.basePath),\n                      url: htmlFilename(file.path, options.basePath) } ];\n        return arr.concat(file.docs.map(function(section) {\n          return { title: section.title,\n                   filename: basePathname(file.path, options.basePath),\n                   url: htmlFilename(file.path, options.basePath) + '#' + section.slug };\n        }));\n      }));\n      searchIndex = 'var searchIndex=' + JSON.stringify(searchIndex) + ';';\n      var processJS = function(src) { return options.minify ? minjs(src) : src; };\n      var processCSS = function(src) { return options.minify ? mincss(src) : src; };\n      var docsScript = '(function(){' + searchIndex + resources.docs.js + '})();';\n      // Render files\n      var htmlFiles = files.map(function(file) {\n      var relativePath = file.path.split('/');\n      relativePath.pop();\n      relativePath = dirUp(options.out.split('/').length) + relativePath.join('/');\n        return {\n          path: file.path,\n          html: resources.template({\n            title: baseFilename(file.path),\n            sections: file.docs,\n            project: { name: options.name, menu: menu },\n            resources: {\n              docs: { js: processJS(docsScript), css: processCSS(resources.docs.css) },\n              previews: { js: processJS(resources.previews.js), css: processCSS(urlsRelative(previewStyles, relativePath)) }\n            }\n          })\n        };\n      });\n      // Add readme with \"fake\" index path.\n      htmlFiles.push({\n        path: path.join(options.basePath, 'index'),\n        html: resources.template({\n          title: '',\n          sections: styledocco.makeSections([{ docs: resources.readme, code: '' }]),\n          project: { name: options.name, menu: menu },\n          resources: {\n            docs: { js: processJS(docsScript), css: processCSS(resources.docs.css) }\n          }\n        })\n      });\n      // Write files to the output dir.\n      htmlFiles.forEach(function(file) {\n        var dest = path.join(options.out, htmlFilename(file.path, options.basePath));\n        log('styledocco: writing ' + file.path + ' -> ' + dest);\n        fs.writeFileSync(dest, file.html);\n      });\n    });\n  });\n};\n\nmodule.exports = cli;\nmodule.exports.htmlFilename = htmlFilename;\nmodule.exports.menuLinks = menuLinks;\nmodule.exports.urlsRelative = urlsRelative;\nmodule.exports.preprocess = preprocess;\nmodule.exports.getFiles = getFiles;\n","/home/travis/build/npmtest/node-npmtest-styledocco/node_modules/styledocco/share/previews.js":"// StyleDocco JavaScript for preview iframes\n// =========================================\n(function () {\n\n'use strict';\n\n// Helper functions\n// ================\nvar toArray = function(obj) { return Array.prototype.slice.call(obj); };\n\nvar bodyEl = document.getElementsByTagName('body')[0];\n\n// Pseudo classes\n// ==============\n// Scans your stylesheet for pseudo classes and adds a class with the same name.\n// Compile regular expression.\nvar pseudos = [ 'link', 'visited', 'hover', 'active', 'focus', 'target',\n                'enabled', 'disabled', 'checked' ];\nvar pseudoRe = new RegExp(\":((\" + pseudos.join(\")|(\") + \"))\", \"gi\");\nvar processedPseudoClasses = toArray(document.styleSheets)\n  .map(function(ss) {\n    return toArray(ss.cssRules)\n      .filter(function(rule) {\n        // Keep only rules with pseudo classes.\n        return rule.selectorText && rule.selectorText.match(pseudoRe);\n      })\n      .map(function(rule) {\n        // Replace : with . and encoded :\n        return rule.cssText.replace(pseudoRe, \".\\\\3A $1\");\n      })\n      .join('');\n  })\n  .join('');\nif (processedPseudoClasses.length) {\n  // Add a new style element with the processed pseudo class styles.\n  var styleEl = document.createElement('style');\n  styleEl.innerText = processedPseudoClasses;\n  var oldStyleEl = document.getElementsByTagName('style')[0];\n  oldStyleEl.parentNode.insertBefore(styleEl, oldStyleEl);\n}\n\n// Resizing\n// ========\n// Get bottom-most point in document with an element.\n// `offsetHeight`/`scrollHeight` will not work with absolute or fixed elements.\nvar getContentHeight = (function() {\n  var bodyStyle = window.getComputedStyle(bodyEl, null);\n  return function() {\n    if (bodyEl.childElementCount === 0) return bodyEl.offsetHeight;\n    var els = bodyEl.getElementsByTagName('*');\n    var elHeights = [];\n    for (var i = 0, l = els.length; i < l; i++) {\n      elHeights.push(els[i].offsetTop + els[i].offsetHeight +\n        parseInt(window.getComputedStyle(els[i], null).getPropertyValue('margin-bottom')));\n    }\n    var height = Math.max.apply(Math, elHeights);\n    height += parseInt(bodyStyle.getPropertyValue('padding-bottom'), 10);\n    return Math.max(height, bodyEl.offsetHeight);\n  };\n})();\n\nvar callbacks = {\n  getHeight: function() {\n    window.parent.postMessage({ height: getContentHeight() }, '*');\n  }\n};\nwindow.addEventListener('message', function (ev) {\n  if (ev.data == null) return;\n  if (typeof ev.data === 'string') callbacks[ev.data]();\n}, false);\n\n}());\n"}